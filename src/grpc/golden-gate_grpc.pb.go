// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: golden-gate.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoldenGateClient is the client API for GoldenGate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoldenGateClient interface {
	IncreaseUsage(ctx context.Context, in *IncreaseUsageRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	RefreshAPIKeyData(ctx context.Context, in *RefreshAPIKeyRequest, opts ...grpc.CallOption) (*RefreshAPIKeyReply, error)
}

type goldenGateClient struct {
	cc grpc.ClientConnInterface
}

func NewGoldenGateClient(cc grpc.ClientConnInterface) GoldenGateClient {
	return &goldenGateClient{cc}
}

func (c *goldenGateClient) IncreaseUsage(ctx context.Context, in *IncreaseUsageRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/GoldenGate/IncreaseUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goldenGateClient) RefreshAPIKeyData(ctx context.Context, in *RefreshAPIKeyRequest, opts ...grpc.CallOption) (*RefreshAPIKeyReply, error) {
	out := new(RefreshAPIKeyReply)
	err := c.cc.Invoke(ctx, "/GoldenGate/RefreshAPIKeyData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoldenGateServer is the server API for GoldenGate service.
// All implementations must embed UnimplementedGoldenGateServer
// for forward compatibility
type GoldenGateServer interface {
	IncreaseUsage(context.Context, *IncreaseUsageRequest) (*EmptyReply, error)
	RefreshAPIKeyData(context.Context, *RefreshAPIKeyRequest) (*RefreshAPIKeyReply, error)
	mustEmbedUnimplementedGoldenGateServer()
}

// UnimplementedGoldenGateServer must be embedded to have forward compatible implementations.
type UnimplementedGoldenGateServer struct {
}

func (UnimplementedGoldenGateServer) IncreaseUsage(context.Context, *IncreaseUsageRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseUsage not implemented")
}
func (UnimplementedGoldenGateServer) RefreshAPIKeyData(context.Context, *RefreshAPIKeyRequest) (*RefreshAPIKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshAPIKeyData not implemented")
}
func (UnimplementedGoldenGateServer) mustEmbedUnimplementedGoldenGateServer() {}

// UnsafeGoldenGateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoldenGateServer will
// result in compilation errors.
type UnsafeGoldenGateServer interface {
	mustEmbedUnimplementedGoldenGateServer()
}

func RegisterGoldenGateServer(s grpc.ServiceRegistrar, srv GoldenGateServer) {
	s.RegisterService(&GoldenGate_ServiceDesc, srv)
}

func _GoldenGate_IncreaseUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoldenGateServer).IncreaseUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoldenGate/IncreaseUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoldenGateServer).IncreaseUsage(ctx, req.(*IncreaseUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoldenGate_RefreshAPIKeyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoldenGateServer).RefreshAPIKeyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoldenGate/RefreshAPIKeyData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoldenGateServer).RefreshAPIKeyData(ctx, req.(*RefreshAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoldenGate_ServiceDesc is the grpc.ServiceDesc for GoldenGate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoldenGate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GoldenGate",
	HandlerType: (*GoldenGateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncreaseUsage",
			Handler:    _GoldenGate_IncreaseUsage_Handler,
		},
		{
			MethodName: "RefreshAPIKeyData",
			Handler:    _GoldenGate_RefreshAPIKeyData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golden-gate.proto",
}
